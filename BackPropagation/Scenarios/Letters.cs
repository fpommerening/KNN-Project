using FP.Study.KNN.BackPropagation.Data;

namespace FP.Study.KNN.BackPropagation.Scenarios
{
    public class Letters : Scenario
    {
        public Letters()
        {
            InputNodeCount = 49;
            HiddenNodeCount = 26;
            OutputNodeCount = 26;

            Pattern = new[]
            {
                // A
                new Pattern
                (
                   new double[]
                    {
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1,  1, -1,  1, -1, -1,
                        -1, 1, -1, -1, -1, -1, -1,
                        -1, 1, 1, 1, 1, 1, -1,
                        -1, 1, -1, -1, -1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1
                    },
                    new double[]
                    {
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
               // B
                new Pattern
                (
                    new double[]
                    {
                        1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, 1, 1, 1, 1, 1, -1
                    },
                    new double[]
                    {
                        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // C
                new Pattern
                (
                    new double[]
                    {
                        -1, 1, 1, 1, 1, 1, 1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        -1, 1, 1, 1, 1, 1, 1
                    },
                    new double[]
                    {
                        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),

                // D
                new Pattern
                (
                    new double[]
                    {
                        1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, 1, 1, 1, 1, 1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // E
                new Pattern
                (
                    new double[]
                    {
                        1, 1, 1, 1, 1, 1, 1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, 1, 1, 1, 1, 1, 1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, 1, 1, 1, 1, 1, 11
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                //F
                new Pattern
                (
                    new double[]
                    {
                        1, 1, 1, 1, 1, 1, 1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, 1, 1, 1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // G
                new Pattern
                (
                    new double[]
                    {
                        -1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, 1, 1, 1, -1,
                        1, -1, -1, 1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        -1, 1, 1, 1, 1, 1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // H
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, 1, 1, 1, 1, 1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // I
                new Pattern
                (
                    new double[]
                    {
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // J
                new Pattern
                (
                    new double[]
                    {
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        1, -1, -1, 1, -1, -1, -1,
                        -1, 1, 1, -1, -1, -1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // K
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, 1, -1,
                        1, -1, -1, -1, 1, -1, -1,
                        1, 1, 1, 1, -1, -1, -1,
                        1, -1, -1, -1, 1, -1, -1,
                        1, -1, -1, -1, -1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // L
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, 1, 1, 1, 1, 1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // M
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        1, 1, -1, -1, -1, 1, 1,
                        1, -1, 1, -1, 1, -1, 1,
                        1, -1, -1, 1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // N
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        1, 1, -1, -1, -1, -1, 1,
                        1, -1, 1, -1, -1, -1, 1,
                        1, -1, -1, 1, -1, -1, 1,
                        1, -1, -1, -1, 1, -1, 1,
                        1, -1, -1, -1, -1, 1, 1,
                        1, -1, -1, -1, -1, -1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // O
                new Pattern
                (
                    new double[]
                    {
                        -1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        -1, 1, 1, 1, 1, 1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // P
                new Pattern
                (
                    new double[]
                    {
                        1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1,
                        1, -1, -1, -1, -1, -1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // Q
                new Pattern
                (
                    new double[]
                    {
                        -1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, 1, 1, -1, 1,
                        1, -1, -1, -1, -1, 1, 1,
                        -1, 1, 1, 1, 1, 1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // R
                new Pattern
                (
                    new double[]
                    {
                        1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, 1, -1, -1,
                        1, -1, -1, -1, -1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // S
                new Pattern
                (
                    new double[]
                    {
                        -1, 1, 1, 1, 1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, -1,
                        -1, 1, 1, 1, 1, -1, -1,
                        -1, -1, -1, -1, -1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1,
                        -1, 1, 1, 1, 1, 1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0
                    }
                ),
                // T
                new Pattern
                (
                    new double[]
                    {
                        1, 1, 1, 1, 1, 1, 1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0
                    }
                ),
                // U
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        -1, 1, 1, 1, 1, 1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0
                    }
                ),
                // V
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        -1, 1, -1, -1, -1, 1, -1,
                        -1, 1, -1, -1, -1, 1, -1,
                        -1, -1, 1, -1, 1, -1, -1,
                        -1, -1, 1, -1, 1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0
                    }
                ),
                // W
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, -1, -1, -1, 1,
                        1, -1, -1, 1, -1, -1, 1,
                        1, -1, 1, -1, 1, -1, 1,
                        1, 1, -1, -1, -1, 1, 1,
                        1, -1, -1, -1, -1, -1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0
                    }
                ),
                // X
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        -1, 1, -1, -1, -1, 1, -1,
                        -1, -1, 1, -1, 1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, 1, -1, 1, -1, -1,
                        -1, 1, -1, -1, -1, 1, -1,
                        1, -1, -1, -1, -1, -1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0
                    }
                ),
                // Y
                new Pattern
                (
                    new double[]
                    {
                        1, -1, -1, -1, -1, -1, 1,
                        -1, 1, -1, -1, -1, 1, -1,
                        -1, -1, 1, -1, 1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, 1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0
                    }
                ),
                //
                new Pattern
                (
                    new double[]
                    {
                        1, 1, 1, 1, 1, 1, 1,
                        -1, -1, -1, -1, -1, 1, -1,
                        -1, -1, -1, -1, 1, -1, -1,
                        -1, -1, -1, 1, -1, -1, -1,
                        -1, -1, 1, -1, -1, -1, -1,
                        -1, 1, -1, -1, -1, -1, -1,
                        1, 1, 1, 1, 1, 1, 1
                    },
                    new double[]
                    {
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1
                    }
                )
            };
        }


    }
}
